"use strict";

// INIT
var bebop = require("../.");
var droneCore = null;

// METHODS
async function initDroneFlightPath() {
	iLog("Drone Flight Path Initiated");
	try {
		await takeOff(5000);
		await goForward(10, 2000); 
		await goUp(20, 3000);
		await goDown(30, 1000);
		//await goBackward(10, 1000);
		//await goLeft(10, 1000);
		//await goRight(10, 1000);
		//await goUp(10, 1000);
		//await goClockwise(10, 1000);
		//await goCounterClockwise(10, 1000);
		await goLand();
		iLog("Drone Flight Path Complete - Drone Done :)"); 
		//process.exit(1);
	} catch(consume) {
		iLog("initDroneFlightPath - The Demo Ninjas are with us - Something Crashed!");
		droneCore.stop();
		droneCore.land();
		iLog(consume);
	}
}

// START
function doDrone() { 
	try {
		iLog("Starting Drone Boot Sequence");
		
		droneCore = bebop.createClient();
		iLog("Drone Client Created");
		
		iLog("Attempting to connect to Drone");
		droneCore.connect(function() {
			iLog("Connected with Drone");
			initDroneEvents();
			initDroneFlightPath();
		});
	} catch (consume) {
		iLog("error in doDrone() " + consume);
		landDrone();
	}
	return true;
}
exports.doDrone = doDrone;


function initDroneEvents(){
	iLog("Drone Flight Events Initiated"); 
	droneCore.on("battery", function (data) {
		iLog("Drone Battery Level: " + data);
	});
  
 /* droneCore.on("navData", function (data) {
    iLog("Alt changed: " + data);
  });

  droneCore.on("ready", function () {
    iLog("ready");
    iLog(droneCore.navData);
  });

  droneCore.on("landed", function () {
    iLog("landed");
  });

  droneCore.on("takingOff", function () {
    iLog("takingOff");
  });

  droneCore.on("hovering", function () {
    iLog("hovering");
    droneCore.level();
  });

  droneCore.on("FlyingStateChanged", function () {
    iLog("FlyingStateChanged");
  });

  droneCore.on("BatteryStateChanged", function () {
    iLog("BatteryStateChanged");
  });

  droneCore.on("takingOff", function() {
    iLog("takingOff");
  });

  droneCore.on("flying", function() {
    iLog("flying");
  });

  droneCore.on("landing", function() {
    iLog("landing");
  });

  droneCore.on("unknown", function(data) {
    iLog("unknown", data);
  });
  */
	droneCore.on("PositionChanged", function(data) {
		console.log(data);
	});
	  
	droneCore.on("GPSFixStateChanged", function(data) {
	    iLog("GPSFixStateChanged" + data);
	});

  /*droneCore.on("MavlinkPlayErrorStateChanged", function(data) {
    iLog("MavlinkPlayErrorStateChanged" + data);
  });

  droneCore.on("MavlinkFilePlayingStateChanged", function(data) {
    iLog("MavlinkFilePlayingStateChanged" + data);
  });

  droneCore.on("AvailabilityStateChanged", function(data) {
    iLog("AvailabilityStateChanged", data);
    if (data.AvailabilityState === 1 && !alreadyFlying) {
      alreadyFlying = true;
      iLog("This is where we would try to call Mavlink.start()");
      //droneCore.Mavlink.start("/data/ftp/internal_000/flightplans/flightPlan.mavlink", 0);
    }
  });
  droneCore.on("ComponentStateListChanged", function(data) {
    iLog("ComponentStateListChanged" + data);
  });  */
}

// DRONE COMMANDS
// droneCore COMMANDS
async function takeOff(milliSeconds, vLogStr) {
	droneCore.takeOff();
	await pauseExecution("takeOff", milliSeconds);
	droneCore.stop();
}
async function goUp(percentageOfMaxSpeed, milliSeconds, vLogStr) {
	droneCore.up(percentageOfMaxSpeed);
	await pauseExecution("up", milliSeconds);
	droneCore.stop();
}
async function goDown(percentageOfMaxSpeed, milliSeconds, vLogStr) {
	droneCore.down(percentageOfMaxSpeed);
	await pauseExecution("down", milliSeconds);
	droneCore.stop();
}
async function goForward(percentageOfMaxSpeed, milliSeconds, vLogStr) {
	droneCore.forward(percentageOfMaxSpeed);
	await pauseExecution("forward", milliSeconds);
	droneCore.stop();
}
async function goBackward(percentageOfMaxSpeed, milliSeconds, vLogStr) {
	droneCore.backward(percentageOfMaxSpeed);
	await pauseExecution("backward", milliSeconds);
	droneCore.stop();
}
async function goRight(percentageOfMaxSpeed, milliSeconds, vLogStr) {
	droneCore.right(percentageOfMaxSpeed);
	await pauseExecution("right", milliSeconds);
	droneCore.stop();
}
async function goLeft(percentageOfMaxSpeed, milliSeconds, vLogStr) {
	droneCore.left(percentageOfMaxSpeed);
	await pauseExecution("left", milliSeconds);
	droneCore.stop();
}
async function goClockwise(percentageOfMaxSpeed, milliSeconds, vLogStr) {
	droneCore.clockwise(percentageOfMaxSpeed);
	await pauseExecution("clockwise", milliSeconds);
	droneCore.stop();
}
async function goCounterClockwise(percentageOfMaxSpeed, milliSeconds, vLogStr) {
	droneCore.counterClockwise(percentageOfMaxSpeed);
	await pauseExecution("counterClockwise", milliSeconds);
	droneCore.stop();
}

function goLand() {
	try{
		droneCore.stop();
		droneCore.land();
		iLog(" >> droneCore Data: landing");
	} catch(consume) {
		iLog("Error in landing droneCore");
		droneCore.stop();
		droneCore.land();
		iLog(consume);
	} 
}

// REGISTER PROTO-TYPES

Date.prototype.format=function(e){var t="";var n=Date.replaceChars;for(var r=0;r<e.length;r++){var i=e.charAt(r);if(r-1>=0&&e.charAt(r-1)=="\\"){t+=i}else if(n[i]){t+=n[i].call(this)}else if(i!="\\"){t+=i}}return t};Date.replaceChars={shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],longMonths:["January","February","March","April","May","June","July","August","September","October","November","December"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],longDays:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],d:function(){return(this.getDate()<10?"0":"")+this.getDate()},D:function(){return Date.replaceChars.shortDays[this.getDay()]},j:function(){return this.getDate()},l:function(){return Date.replaceChars.longDays[this.getDay()]},N:function(){return this.getDay()+1},S:function(){return this.getDate()%10==1&&this.getDate()!=11?"st":this.getDate()%10==2&&this.getDate()!=12?"nd":this.getDate()%10==3&&this.getDate()!=13?"rd":"th"},w:function(){return this.getDay()},z:function(){var e=new Date(this.getFullYear(),0,1);return Math.ceil((this-e)/864e5)},W:function(){var e=new Date(this.getFullYear(),0,1);return Math.ceil(((this-e)/864e5+e.getDay()+1)/7)},F:function(){return Date.replaceChars.longMonths[this.getMonth()]},m:function(){return(this.getMonth()<9?"0":"")+(this.getMonth()+1)},M:function(){return Date.replaceChars.shortMonths[this.getMonth()]},n:function(){return this.getMonth()+1},t:function(){var e=new Date;return(new Date(e.getFullYear(),e.getMonth(),0)).getDate()},L:function(){var e=this.getFullYear();return e%400==0||e%100!=0&&e%4==0},o:function(){var e=new Date(this.valueOf());e.setDate(e.getDate()-(this.getDay()+6)%7+3);return e.getFullYear()},Y:function(){return this.getFullYear()},y:function(){return(""+this.getFullYear()).substr(2)},a:function(){return this.getHours()<12?"am":"pm"},A:function(){return this.getHours()<12?"AM":"PM"},B:function(){return Math.floor(((this.getUTCHours()+1)%24+this.getUTCMinutes()/60+this.getUTCSeconds()/3600)*1e3/24)},g:function(){return this.getHours()%12||12},G:function(){return this.getHours()},h:function(){return((this.getHours()%12||12)<10?"0":"")+(this.getHours()%12||12)},H:function(){return(this.getHours()<10?"0":"")+this.getHours()},i:function(){return(this.getMinutes()<10?"0":"")+this.getMinutes()},s:function(){return(this.getSeconds()<10?"0":"")+this.getSeconds()},u:function(){var e=this.getMilliseconds();return(e<10?"00":e<100?"0":"")+e},e:function(){return"Not Yet Supported"},I:function(){var e=null;for(var t=0;t<12;++t){var n=new Date(this.getFullYear(),t,1);var r=n.getTimezoneOffset();if(e===null)e=r;else if(r<e){e=r;break}else if(r>e)break}return this.getTimezoneOffset()==e|0},O:function(){return(-this.getTimezoneOffset()<0?"-":"+")+(Math.abs(this.getTimezoneOffset()/60)<10?"0":"")+Math.abs(this.getTimezoneOffset()/60)+"00"},P:function(){return(-this.getTimezoneOffset()<0?"-":"+")+(Math.abs(this.getTimezoneOffset()/60)<10?"0":"")+Math.abs(this.getTimezoneOffset()/60)+":00"},T:function(){var e=this.getMonth();this.setMonth(0);var t=this.toTimeString().replace(/^.+ \(?([^\)]+)\)?$/,"$1");this.setMonth(e);return t},Z:function(){return-this.getTimezoneOffset()*60},c:function(){return this.format("Y-m-d\\TH:i:sP")},r:function(){return this.toString()},U:function(){return this.getTime()/1e3}}
// taken from http://jacwright.com/projects/javascript/date_format/

// LOGGING
function iLog(vMsg) {
	try{
		console.log(new Date().format('Ymd His') + ": " + vMsg);
	} catch(consume) {
		console.log("error in iLog land --> " + consume);
	}
}

// EXECUTION UTILS
function pauseExecution(vLog, timeMS){
	iLog(" >> droneCore Data: " +  vLog + " :: " + timeMS);
	return new Promise(resolve => setTimeout(resolve, timeMS));
}

